//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var fb303_ttypes = require('./fb303_types')


var FacebookService = require('./FacebookService')
var FacebookServiceClient = FacebookService.Client
var ttypes = require('./hive_metastore_types');
//HELPER FUNCTIONS AND STRUCTURES

var ThriftHiveMetastore_create_database_args = function(args) {
  this.database = null;
  if (args) {
    if (args.database !== undefined) {
      this.database = args.database;
    }
  }
};
ThriftHiveMetastore_create_database_args.prototype = {};
ThriftHiveMetastore_create_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.database = new ttypes.Database();
        this.database.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_database_args');
  if (this.database) {
    output.writeFieldBegin('database', Thrift.Type.STRUCT, 1);
    this.database.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_database_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_create_database_result.prototype = {};
ThriftHiveMetastore_create_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_database_result');
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_database_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ThriftHiveMetastore_get_database_args.prototype = {};
ThriftHiveMetastore_get_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_database_args');
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_database_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_database_result.prototype = {};
ThriftHiveMetastore_get_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Database();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_database_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_database_args = function(args) {
  this.name = null;
  this.deleteData = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
  }
};
ThriftHiveMetastore_drop_database_args.prototype = {};
ThriftHiveMetastore_drop_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_database_args');
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_database_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_drop_database_result.prototype = {};
ThriftHiveMetastore_drop_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidOperationException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_database_result');
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_databases_args = function(args) {
  this.pattern = null;
  if (args) {
    if (args.pattern !== undefined) {
      this.pattern = args.pattern;
    }
  }
};
ThriftHiveMetastore_get_databases_args.prototype = {};
ThriftHiveMetastore_get_databases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pattern = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_databases_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_databases_args');
  if (this.pattern) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 1);
    output.writeString(this.pattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_databases_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_databases_result.prototype = {};
ThriftHiveMetastore_get_databases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size196 = 0;
        var _rtmp3200;
        this.success = [];
        var _etype199 = 0;
        _rtmp3200 = input.readListBegin();
        _etype199 = _rtmp3200.etype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var elem202 = null;
          elem202 = input.readString();
          this.success.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_databases_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_databases_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter203 in this.success)
    {
      if (this.success.hasOwnProperty(iter203))
      {
        iter203 = this.success[iter203];
        output.writeString(iter203);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_all_databases_args = function(args) {
};
ThriftHiveMetastore_get_all_databases_args.prototype = {};
ThriftHiveMetastore_get_all_databases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_all_databases_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_databases_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_all_databases_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_all_databases_result.prototype = {};
ThriftHiveMetastore_get_all_databases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size204 = 0;
        var _rtmp3208;
        this.success = [];
        var _etype207 = 0;
        _rtmp3208 = input.readListBegin();
        _etype207 = _rtmp3208.etype;
        _size204 = _rtmp3208.size;
        for (var _i209 = 0; _i209 < _size204; ++_i209)
        {
          var elem210 = null;
          elem210 = input.readString();
          this.success.push(elem210);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_all_databases_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_databases_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter211 in this.success)
    {
      if (this.success.hasOwnProperty(iter211))
      {
        iter211 = this.success[iter211];
        output.writeString(iter211);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_database_args = function(args) {
  this.dbname = null;
  this.db = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.db !== undefined) {
      this.db = args.db;
    }
  }
};
ThriftHiveMetastore_alter_database_args.prototype = {};
ThriftHiveMetastore_alter_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.db = new ttypes.Database();
        this.db.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_database_args');
  if (this.dbname) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.db) {
    output.writeFieldBegin('db', Thrift.Type.STRUCT, 2);
    this.db.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_database_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_database_result.prototype = {};
ThriftHiveMetastore_alter_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_database_result');
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_type_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ThriftHiveMetastore_get_type_args.prototype = {};
ThriftHiveMetastore_get_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_type_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_args');
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_type_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_type_result.prototype = {};
ThriftHiveMetastore_get_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Type();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_type_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_type_args = function(args) {
  this.type = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
ThriftHiveMetastore_create_type_args.prototype = {};
ThriftHiveMetastore_create_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.type = new ttypes.Type();
        this.type.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_type_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_type_args');
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.STRUCT, 1);
    this.type.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_type_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_create_type_result.prototype = {};
ThriftHiveMetastore_create_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_type_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_type_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_type_args = function(args) {
  this.type = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
ThriftHiveMetastore_drop_type_args.prototype = {};
ThriftHiveMetastore_drop_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_type_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_type_args');
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_type_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_type_result.prototype = {};
ThriftHiveMetastore_drop_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_type_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_type_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_type_all_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ThriftHiveMetastore_get_type_all_args.prototype = {};
ThriftHiveMetastore_get_type_all_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_type_all_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_all_args');
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_type_all_result = function(args) {
  this.success = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_type_all_result.prototype = {};
ThriftHiveMetastore_get_type_all_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size212 = 0;
        var _rtmp3216;
        this.success = {};
        var _ktype213 = 0;
        var _vtype214 = 0;
        _rtmp3216 = input.readMapBegin();
        _ktype213 = _rtmp3216.ktype;
        _vtype214 = _rtmp3216.vtype;
        _size212 = _rtmp3216.size;
        for (var _i217 = 0; _i217 < _size212; ++_i217)
        {
          var key218 = null;
          var val219 = null;
          key218 = input.readString();
          val219 = new ttypes.Type();
          val219.read(input);
          this.success[key218] = val219;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_type_all_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_all_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter220 in this.success)
    {
      if (this.success.hasOwnProperty(kiter220))
      {
        var viter221 = this.success[kiter220];
        output.writeString(kiter220);
        viter221.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_fields_args = function(args) {
  this.db_name = null;
  this.table_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.table_name !== undefined) {
      this.table_name = args.table_name;
    }
  }
};
ThriftHiveMetastore_get_fields_args.prototype = {};
ThriftHiveMetastore_get_fields_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_fields_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_fields_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.table_name) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_fields_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_get_fields_result.prototype = {};
ThriftHiveMetastore_get_fields_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size222 = 0;
        var _rtmp3226;
        this.success = [];
        var _etype225 = 0;
        _rtmp3226 = input.readListBegin();
        _etype225 = _rtmp3226.etype;
        _size222 = _rtmp3226.size;
        for (var _i227 = 0; _i227 < _size222; ++_i227)
        {
          var elem228 = null;
          elem228 = new ttypes.FieldSchema();
          elem228.read(input);
          this.success.push(elem228);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.UnknownTableException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_fields_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_fields_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter229 in this.success)
    {
      if (this.success.hasOwnProperty(iter229))
      {
        iter229 = this.success[iter229];
        iter229.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_schema_args = function(args) {
  this.db_name = null;
  this.table_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.table_name !== undefined) {
      this.table_name = args.table_name;
    }
  }
};
ThriftHiveMetastore_get_schema_args.prototype = {};
ThriftHiveMetastore_get_schema_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_schema_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_schema_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.table_name) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_schema_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_get_schema_result.prototype = {};
ThriftHiveMetastore_get_schema_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size230 = 0;
        var _rtmp3234;
        this.success = [];
        var _etype233 = 0;
        _rtmp3234 = input.readListBegin();
        _etype233 = _rtmp3234.etype;
        _size230 = _rtmp3234.size;
        for (var _i235 = 0; _i235 < _size230; ++_i235)
        {
          var elem236 = null;
          elem236 = new ttypes.FieldSchema();
          elem236.read(input);
          this.success.push(elem236);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.UnknownTableException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_schema_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_schema_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter237 in this.success)
    {
      if (this.success.hasOwnProperty(iter237))
      {
        iter237 = this.success[iter237];
        iter237.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_table_args = function(args) {
  this.tbl = null;
  if (args) {
    if (args.tbl !== undefined) {
      this.tbl = args.tbl;
    }
  }
};
ThriftHiveMetastore_create_table_args.prototype = {};
ThriftHiveMetastore_create_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tbl = new ttypes.Table();
        this.tbl.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_args');
  if (this.tbl) {
    output.writeFieldBegin('tbl', Thrift.Type.STRUCT, 1);
    this.tbl.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_table_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_create_table_result.prototype = {};
ThriftHiveMetastore_create_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.NoSuchObjectException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_result');
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_table_args = function(args) {
  this.dbname = null;
  this.name = null;
  this.deleteData = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
  }
};
ThriftHiveMetastore_drop_table_args.prototype = {};
ThriftHiveMetastore_drop_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_table_args');
  if (this.dbname) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 3);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_table_result = function(args) {
  this.o1 = null;
  this.o3 = null;
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_drop_table_result.prototype = {};
ThriftHiveMetastore_drop_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_table_result');
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 2);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_tables_args = function(args) {
  this.db_name = null;
  this.pattern = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.pattern !== undefined) {
      this.pattern = args.pattern;
    }
  }
};
ThriftHiveMetastore_get_tables_args.prototype = {};
ThriftHiveMetastore_get_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pattern = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_tables_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_tables_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.pattern) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 2);
    output.writeString(this.pattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_tables_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_tables_result.prototype = {};
ThriftHiveMetastore_get_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size238 = 0;
        var _rtmp3242;
        this.success = [];
        var _etype241 = 0;
        _rtmp3242 = input.readListBegin();
        _etype241 = _rtmp3242.etype;
        _size238 = _rtmp3242.size;
        for (var _i243 = 0; _i243 < _size238; ++_i243)
        {
          var elem244 = null;
          elem244 = input.readString();
          this.success.push(elem244);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_tables_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_tables_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter245 in this.success)
    {
      if (this.success.hasOwnProperty(iter245))
      {
        iter245 = this.success[iter245];
        output.writeString(iter245);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_all_tables_args = function(args) {
  this.db_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
  }
};
ThriftHiveMetastore_get_all_tables_args.prototype = {};
ThriftHiveMetastore_get_all_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_all_tables_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_tables_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_all_tables_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_all_tables_result.prototype = {};
ThriftHiveMetastore_get_all_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size246 = 0;
        var _rtmp3250;
        this.success = [];
        var _etype249 = 0;
        _rtmp3250 = input.readListBegin();
        _etype249 = _rtmp3250.etype;
        _size246 = _rtmp3250.size;
        for (var _i251 = 0; _i251 < _size246; ++_i251)
        {
          var elem252 = null;
          elem252 = input.readString();
          this.success.push(elem252);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_all_tables_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_tables_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter253 in this.success)
    {
      if (this.success.hasOwnProperty(iter253))
      {
        iter253 = this.success[iter253];
        output.writeString(iter253);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_table_args = function(args) {
  this.dbname = null;
  this.tbl_name = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
  }
};
ThriftHiveMetastore_get_table_args.prototype = {};
ThriftHiveMetastore_get_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_args');
  if (this.dbname) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_table_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_table_result.prototype = {};
ThriftHiveMetastore_get_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Table();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_table_args = function(args) {
  this.dbname = null;
  this.tbl_name = null;
  this.new_tbl = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.new_tbl !== undefined) {
      this.new_tbl = args.new_tbl;
    }
  }
};
ThriftHiveMetastore_alter_table_args.prototype = {};
ThriftHiveMetastore_alter_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_tbl = new ttypes.Table();
        this.new_tbl.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_args');
  if (this.dbname) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.new_tbl) {
    output.writeFieldBegin('new_tbl', Thrift.Type.STRUCT, 3);
    this.new_tbl.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_table_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_table_result.prototype = {};
ThriftHiveMetastore_alter_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_result');
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_add_partition_args = function(args) {
  this.new_part = null;
  if (args) {
    if (args.new_part !== undefined) {
      this.new_part = args.new_part;
    }
  }
};
ThriftHiveMetastore_add_partition_args.prototype = {};
ThriftHiveMetastore_add_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition();
        this.new_part.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_args');
  if (this.new_part) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 1);
    this.new_part.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_add_partition_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_add_partition_result.prototype = {};
ThriftHiveMetastore_add_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_append_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
  }
};
ThriftHiveMetastore_append_partition_args.prototype = {};
ThriftHiveMetastore_append_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size254 = 0;
        var _rtmp3258;
        this.part_vals = [];
        var _etype257 = 0;
        _rtmp3258 = input.readListBegin();
        _etype257 = _rtmp3258.etype;
        _size254 = _rtmp3258.size;
        for (var _i259 = 0; _i259 < _size254; ++_i259)
        {
          var elem260 = null;
          elem260 = input.readString();
          this.part_vals.push(elem260);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter261 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter261))
      {
        iter261 = this.part_vals[iter261];
        output.writeString(iter261);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_append_partition_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_append_partition_result.prototype = {};
ThriftHiveMetastore_append_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_append_partition_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
  }
};
ThriftHiveMetastore_append_partition_by_name_args.prototype = {};
ThriftHiveMetastore_append_partition_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_append_partition_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_append_partition_by_name_result.prototype = {};
ThriftHiveMetastore_append_partition_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.deleteData = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
  }
};
ThriftHiveMetastore_drop_partition_args.prototype = {};
ThriftHiveMetastore_drop_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size262 = 0;
        var _rtmp3266;
        this.part_vals = [];
        var _etype265 = 0;
        _rtmp3266 = input.readListBegin();
        _etype265 = _rtmp3266.etype;
        _size262 = _rtmp3266.size;
        for (var _i267 = 0; _i267 < _size262; ++_i267)
        {
          var elem268 = null;
          elem268 = input.readString();
          this.part_vals.push(elem268);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter269 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter269))
      {
        iter269 = this.part_vals[iter269];
        output.writeString(iter269);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_partition_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_partition_result.prototype = {};
ThriftHiveMetastore_drop_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_partition_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  this.deleteData = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
  }
};
ThriftHiveMetastore_drop_partition_by_name_args.prototype = {};
ThriftHiveMetastore_drop_partition_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  if (this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_partition_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_partition_by_name_result.prototype = {};
ThriftHiveMetastore_drop_partition_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
  }
};
ThriftHiveMetastore_get_partition_args.prototype = {};
ThriftHiveMetastore_get_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size270 = 0;
        var _rtmp3274;
        this.part_vals = [];
        var _etype273 = 0;
        _rtmp3274 = input.readListBegin();
        _etype273 = _rtmp3274.etype;
        _size270 = _rtmp3274.size;
        for (var _i275 = 0; _i275 < _size270; ++_i275)
        {
          var elem276 = null;
          elem276 = input.readString();
          this.part_vals.push(elem276);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter277 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter277))
      {
        iter277 = this.part_vals[iter277];
        output.writeString(iter277);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_result.prototype = {};
ThriftHiveMetastore_get_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_with_auth_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.user_name !== undefined) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined) {
      this.group_names = args.group_names;
    }
  }
};
ThriftHiveMetastore_get_partition_with_auth_args.prototype = {};
ThriftHiveMetastore_get_partition_with_auth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size278 = 0;
        var _rtmp3282;
        this.part_vals = [];
        var _etype281 = 0;
        _rtmp3282 = input.readListBegin();
        _etype281 = _rtmp3282.etype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          var elem284 = null;
          elem284 = input.readString();
          this.part_vals.push(elem284);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size285 = 0;
        var _rtmp3289;
        this.group_names = [];
        var _etype288 = 0;
        _rtmp3289 = input.readListBegin();
        _etype288 = _rtmp3289.etype;
        _size285 = _rtmp3289.size;
        for (var _i290 = 0; _i290 < _size285; ++_i290)
        {
          var elem291 = null;
          elem291 = input.readString();
          this.group_names.push(elem291);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_with_auth_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_with_auth_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter292 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter292))
      {
        iter292 = this.part_vals[iter292];
        output.writeString(iter292);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.user_name) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 4);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter293 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter293))
      {
        iter293 = this.group_names[iter293];
        output.writeString(iter293);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_with_auth_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_with_auth_result.prototype = {};
ThriftHiveMetastore_get_partition_with_auth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_with_auth_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_with_auth_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
  }
};
ThriftHiveMetastore_get_partition_by_name_args.prototype = {};
ThriftHiveMetastore_get_partition_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_by_name_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_by_name_result.prototype = {};
ThriftHiveMetastore_get_partition_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_by_name_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partitions_args.prototype = {};
ThriftHiveMetastore_get_partitions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_result.prototype = {};
ThriftHiveMetastore_get_partitions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size294 = 0;
        var _rtmp3298;
        this.success = [];
        var _etype297 = 0;
        _rtmp3298 = input.readListBegin();
        _etype297 = _rtmp3298.etype;
        _size294 = _rtmp3298.size;
        for (var _i299 = 0; _i299 < _size294; ++_i299)
        {
          var elem300 = null;
          elem300 = new ttypes.Partition();
          elem300.read(input);
          this.success.push(elem300);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter301 in this.success)
    {
      if (this.success.hasOwnProperty(iter301))
      {
        iter301 = this.success[iter301];
        iter301.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_with_auth_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_parts = -1;
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
    if (args.user_name !== undefined) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined) {
      this.group_names = args.group_names;
    }
  }
};
ThriftHiveMetastore_get_partitions_with_auth_args.prototype = {};
ThriftHiveMetastore_get_partitions_with_auth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size302 = 0;
        var _rtmp3306;
        this.group_names = [];
        var _etype305 = 0;
        _rtmp3306 = input.readListBegin();
        _etype305 = _rtmp3306.etype;
        _size302 = _rtmp3306.size;
        for (var _i307 = 0; _i307 < _size302; ++_i307)
        {
          var elem308 = null;
          elem308 = input.readString();
          this.group_names.push(elem308);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_with_auth_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_with_auth_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  if (this.user_name) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 4);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter309 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter309))
      {
        iter309 = this.group_names[iter309];
        output.writeString(iter309);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_with_auth_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_with_auth_result.prototype = {};
ThriftHiveMetastore_get_partitions_with_auth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size310 = 0;
        var _rtmp3314;
        this.success = [];
        var _etype313 = 0;
        _rtmp3314 = input.readListBegin();
        _etype313 = _rtmp3314.etype;
        _size310 = _rtmp3314.size;
        for (var _i315 = 0; _i315 < _size310; ++_i315)
        {
          var elem316 = null;
          elem316 = new ttypes.Partition();
          elem316.read(input);
          this.success.push(elem316);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_with_auth_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_with_auth_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter317 in this.success)
    {
      if (this.success.hasOwnProperty(iter317))
      {
        iter317 = this.success[iter317];
        iter317.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_names_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partition_names_args.prototype = {};
ThriftHiveMetastore_get_partition_names_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_names_result = function(args) {
  this.success = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_names_result.prototype = {};
ThriftHiveMetastore_get_partition_names_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size318 = 0;
        var _rtmp3322;
        this.success = [];
        var _etype321 = 0;
        _rtmp3322 = input.readListBegin();
        _etype321 = _rtmp3322.etype;
        _size318 = _rtmp3322.size;
        for (var _i323 = 0; _i323 < _size318; ++_i323)
        {
          var elem324 = null;
          elem324 = input.readString();
          this.success.push(elem324);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter325 in this.success)
    {
      if (this.success.hasOwnProperty(iter325))
      {
        iter325 = this.success[iter325];
        output.writeString(iter325);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_ps_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partitions_ps_args.prototype = {};
ThriftHiveMetastore_get_partitions_ps_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size326 = 0;
        var _rtmp3330;
        this.part_vals = [];
        var _etype329 = 0;
        _rtmp3330 = input.readListBegin();
        _etype329 = _rtmp3330.etype;
        _size326 = _rtmp3330.size;
        for (var _i331 = 0; _i331 < _size326; ++_i331)
        {
          var elem332 = null;
          elem332 = input.readString();
          this.part_vals.push(elem332);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter333 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter333))
      {
        iter333 = this.part_vals[iter333];
        output.writeString(iter333);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_ps_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_partitions_ps_result.prototype = {};
ThriftHiveMetastore_get_partitions_ps_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size334 = 0;
        var _rtmp3338;
        this.success = [];
        var _etype337 = 0;
        _rtmp3338 = input.readListBegin();
        _etype337 = _rtmp3338.etype;
        _size334 = _rtmp3338.size;
        for (var _i339 = 0; _i339 < _size334; ++_i339)
        {
          var elem340 = null;
          elem340 = new ttypes.Partition();
          elem340.read(input);
          this.success.push(elem340);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter341 in this.success)
    {
      if (this.success.hasOwnProperty(iter341))
      {
        iter341 = this.success[iter341];
        iter341.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_ps_with_auth_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.max_parts = -1;
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
    if (args.user_name !== undefined) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined) {
      this.group_names = args.group_names;
    }
  }
};
ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype = {};
ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size342 = 0;
        var _rtmp3346;
        this.part_vals = [];
        var _etype345 = 0;
        _rtmp3346 = input.readListBegin();
        _etype345 = _rtmp3346.etype;
        _size342 = _rtmp3346.size;
        for (var _i347 = 0; _i347 < _size342; ++_i347)
        {
          var elem348 = null;
          elem348 = input.readString();
          this.part_vals.push(elem348);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size349 = 0;
        var _rtmp3353;
        this.group_names = [];
        var _etype352 = 0;
        _rtmp3353 = input.readListBegin();
        _etype352 = _rtmp3353.etype;
        _size349 = _rtmp3353.size;
        for (var _i354 = 0; _i354 < _size349; ++_i354)
        {
          var elem355 = null;
          elem355 = input.readString();
          this.group_names.push(elem355);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_with_auth_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter356 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter356))
      {
        iter356 = this.part_vals[iter356];
        output.writeString(iter356);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  if (this.user_name) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 5);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter357 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter357))
      {
        iter357 = this.group_names[iter357];
        output.writeString(iter357);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_ps_with_auth_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype = {};
ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size358 = 0;
        var _rtmp3362;
        this.success = [];
        var _etype361 = 0;
        _rtmp3362 = input.readListBegin();
        _etype361 = _rtmp3362.etype;
        _size358 = _rtmp3362.size;
        for (var _i363 = 0; _i363 < _size358; ++_i363)
        {
          var elem364 = null;
          elem364 = new ttypes.Partition();
          elem364.read(input);
          this.success.push(elem364);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_with_auth_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter365 in this.success)
    {
      if (this.success.hasOwnProperty(iter365))
      {
        iter365 = this.success[iter365];
        iter365.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_names_ps_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined) {
      this.part_vals = args.part_vals;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partition_names_ps_args.prototype = {};
ThriftHiveMetastore_get_partition_names_ps_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size366 = 0;
        var _rtmp3370;
        this.part_vals = [];
        var _etype369 = 0;
        _rtmp3370 = input.readListBegin();
        _etype369 = _rtmp3370.etype;
        _size366 = _rtmp3370.size;
        for (var _i371 = 0; _i371 < _size366; ++_i371)
        {
          var elem372 = null;
          elem372 = input.readString();
          this.part_vals.push(elem372);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_ps_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_ps_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter373 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter373))
      {
        iter373 = this.part_vals[iter373];
        output.writeString(iter373);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_names_ps_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_partition_names_ps_result.prototype = {};
ThriftHiveMetastore_get_partition_names_ps_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size374 = 0;
        var _rtmp3378;
        this.success = [];
        var _etype377 = 0;
        _rtmp3378 = input.readListBegin();
        _etype377 = _rtmp3378.etype;
        _size374 = _rtmp3378.size;
        for (var _i379 = 0; _i379 < _size374; ++_i379)
        {
          var elem380 = null;
          elem380 = input.readString();
          this.success.push(elem380);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_ps_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_ps_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter381 in this.success)
    {
      if (this.success.hasOwnProperty(iter381))
      {
        iter381 = this.success[iter381];
        output.writeString(iter381);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_by_filter_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.filter = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
    if (args.max_parts !== undefined) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partitions_by_filter_args.prototype = {};
ThriftHiveMetastore_get_partitions_by_filter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.filter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_filter_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_filter_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.filter) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 3);
    output.writeString(this.filter);
    output.writeFieldEnd();
  }
  if (this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_by_filter_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_by_filter_result.prototype = {};
ThriftHiveMetastore_get_partitions_by_filter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size382 = 0;
        var _rtmp3386;
        this.success = [];
        var _etype385 = 0;
        _rtmp3386 = input.readListBegin();
        _etype385 = _rtmp3386.etype;
        _size382 = _rtmp3386.size;
        for (var _i387 = 0; _i387 < _size382; ++_i387)
        {
          var elem388 = null;
          elem388 = new ttypes.Partition();
          elem388.read(input);
          this.success.push(elem388);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_filter_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_filter_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter389 in this.success)
    {
      if (this.success.hasOwnProperty(iter389))
      {
        iter389 = this.success[iter389];
        iter389.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.new_part = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.new_part !== undefined) {
      this.new_part = args.new_part;
    }
  }
};
ThriftHiveMetastore_alter_partition_args.prototype = {};
ThriftHiveMetastore_alter_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition();
        this.new_part.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.new_part) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 3);
    this.new_part.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_partition_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_partition_result.prototype = {};
ThriftHiveMetastore_alter_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_result');
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_config_value_args = function(args) {
  this.name = null;
  this.defaultValue = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.defaultValue !== undefined) {
      this.defaultValue = args.defaultValue;
    }
  }
};
ThriftHiveMetastore_get_config_value_args.prototype = {};
ThriftHiveMetastore_get_config_value_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.defaultValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_config_value_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_config_value_args');
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.defaultValue) {
    output.writeFieldBegin('defaultValue', Thrift.Type.STRING, 2);
    output.writeString(this.defaultValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_config_value_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_config_value_result.prototype = {};
ThriftHiveMetastore_get_config_value_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.ConfigValSecurityException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_config_value_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_config_value_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_partition_name_to_vals_args = function(args) {
  this.part_name = null;
  if (args) {
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
  }
};
ThriftHiveMetastore_partition_name_to_vals_args.prototype = {};
ThriftHiveMetastore_partition_name_to_vals_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_vals_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_vals_args');
  if (this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 1);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_partition_name_to_vals_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_partition_name_to_vals_result.prototype = {};
ThriftHiveMetastore_partition_name_to_vals_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size390 = 0;
        var _rtmp3394;
        this.success = [];
        var _etype393 = 0;
        _rtmp3394 = input.readListBegin();
        _etype393 = _rtmp3394.etype;
        _size390 = _rtmp3394.size;
        for (var _i395 = 0; _i395 < _size390; ++_i395)
        {
          var elem396 = null;
          elem396 = input.readString();
          this.success.push(elem396);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_vals_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_vals_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter397 in this.success)
    {
      if (this.success.hasOwnProperty(iter397))
      {
        iter397 = this.success[iter397];
        output.writeString(iter397);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_partition_name_to_spec_args = function(args) {
  this.part_name = null;
  if (args) {
    if (args.part_name !== undefined) {
      this.part_name = args.part_name;
    }
  }
};
ThriftHiveMetastore_partition_name_to_spec_args.prototype = {};
ThriftHiveMetastore_partition_name_to_spec_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_spec_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_spec_args');
  if (this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 1);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_partition_name_to_spec_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_partition_name_to_spec_result.prototype = {};
ThriftHiveMetastore_partition_name_to_spec_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size398 = 0;
        var _rtmp3402;
        this.success = {};
        var _ktype399 = 0;
        var _vtype400 = 0;
        _rtmp3402 = input.readMapBegin();
        _ktype399 = _rtmp3402.ktype;
        _vtype400 = _rtmp3402.vtype;
        _size398 = _rtmp3402.size;
        for (var _i403 = 0; _i403 < _size398; ++_i403)
        {
          var key404 = null;
          var val405 = null;
          key404 = input.readString();
          val405 = input.readString();
          this.success[key404] = val405;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_spec_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_spec_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter406 in this.success)
    {
      if (this.success.hasOwnProperty(kiter406))
      {
        var viter407 = this.success[kiter406];
        output.writeString(kiter406);
        output.writeString(viter407);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_add_index_args = function(args) {
  this.new_index = null;
  this.index_table = null;
  if (args) {
    if (args.new_index !== undefined) {
      this.new_index = args.new_index;
    }
    if (args.index_table !== undefined) {
      this.index_table = args.index_table;
    }
  }
};
ThriftHiveMetastore_add_index_args.prototype = {};
ThriftHiveMetastore_add_index_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_index = new ttypes.Index();
        this.new_index.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.index_table = new ttypes.Table();
        this.index_table.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_index_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_index_args');
  if (this.new_index) {
    output.writeFieldBegin('new_index', Thrift.Type.STRUCT, 1);
    this.new_index.write(output);
    output.writeFieldEnd();
  }
  if (this.index_table) {
    output.writeFieldBegin('index_table', Thrift.Type.STRUCT, 2);
    this.index_table.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_add_index_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_add_index_result.prototype = {};
ThriftHiveMetastore_add_index_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Index();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_index_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_index_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_index_args = function(args) {
  this.dbname = null;
  this.base_tbl_name = null;
  this.idx_name = null;
  this.new_idx = null;
  if (args) {
    if (args.dbname !== undefined) {
      this.dbname = args.dbname;
    }
    if (args.base_tbl_name !== undefined) {
      this.base_tbl_name = args.base_tbl_name;
    }
    if (args.idx_name !== undefined) {
      this.idx_name = args.idx_name;
    }
    if (args.new_idx !== undefined) {
      this.new_idx = args.new_idx;
    }
  }
};
ThriftHiveMetastore_alter_index_args.prototype = {};
ThriftHiveMetastore_alter_index_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.base_tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.idx_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_idx = new ttypes.Index();
        this.new_idx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_index_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_index_args');
  if (this.dbname) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.base_tbl_name) {
    output.writeFieldBegin('base_tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.base_tbl_name);
    output.writeFieldEnd();
  }
  if (this.idx_name) {
    output.writeFieldBegin('idx_name', Thrift.Type.STRING, 3);
    output.writeString(this.idx_name);
    output.writeFieldEnd();
  }
  if (this.new_idx) {
    output.writeFieldBegin('new_idx', Thrift.Type.STRUCT, 4);
    this.new_idx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_index_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_index_result.prototype = {};
ThriftHiveMetastore_alter_index_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_index_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_index_result');
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_index_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.index_name = null;
  this.deleteData = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.index_name !== undefined) {
      this.index_name = args.index_name;
    }
    if (args.deleteData !== undefined) {
      this.deleteData = args.deleteData;
    }
  }
};
ThriftHiveMetastore_drop_index_by_name_args.prototype = {};
ThriftHiveMetastore_drop_index_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.index_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_index_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_index_by_name_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.index_name) {
    output.writeFieldBegin('index_name', Thrift.Type.STRING, 3);
    output.writeString(this.index_name);
    output.writeFieldEnd();
  }
  if (this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_index_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_index_by_name_result.prototype = {};
ThriftHiveMetastore_drop_index_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_index_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_index_by_name_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_index_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.index_name = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.index_name !== undefined) {
      this.index_name = args.index_name;
    }
  }
};
ThriftHiveMetastore_get_index_by_name_args.prototype = {};
ThriftHiveMetastore_get_index_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.index_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_index_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_by_name_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.index_name) {
    output.writeFieldBegin('index_name', Thrift.Type.STRING, 3);
    output.writeString(this.index_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_index_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_index_by_name_result.prototype = {};
ThriftHiveMetastore_get_index_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Index();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_index_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_by_name_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_indexes_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_indexes = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_indexes !== undefined) {
      this.max_indexes = args.max_indexes;
    }
  }
};
ThriftHiveMetastore_get_indexes_args.prototype = {};
ThriftHiveMetastore_get_indexes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_indexes = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_indexes_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_indexes_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_indexes) {
    output.writeFieldBegin('max_indexes', Thrift.Type.I16, 3);
    output.writeI16(this.max_indexes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_indexes_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_indexes_result.prototype = {};
ThriftHiveMetastore_get_indexes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size408 = 0;
        var _rtmp3412;
        this.success = [];
        var _etype411 = 0;
        _rtmp3412 = input.readListBegin();
        _etype411 = _rtmp3412.etype;
        _size408 = _rtmp3412.size;
        for (var _i413 = 0; _i413 < _size408; ++_i413)
        {
          var elem414 = null;
          elem414 = new ttypes.Index();
          elem414.read(input);
          this.success.push(elem414);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_indexes_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_indexes_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter415 in this.success)
    {
      if (this.success.hasOwnProperty(iter415))
      {
        iter415 = this.success[iter415];
        iter415.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_index_names_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_indexes = -1;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_indexes !== undefined) {
      this.max_indexes = args.max_indexes;
    }
  }
};
ThriftHiveMetastore_get_index_names_args.prototype = {};
ThriftHiveMetastore_get_index_names_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_indexes = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_index_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_names_args');
  if (this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_indexes) {
    output.writeFieldBegin('max_indexes', Thrift.Type.I16, 3);
    output.writeI16(this.max_indexes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_index_names_result = function(args) {
  this.success = null;
  this.o2 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o2 !== undefined) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_index_names_result.prototype = {};
ThriftHiveMetastore_get_index_names_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size416 = 0;
        var _rtmp3420;
        this.success = [];
        var _etype419 = 0;
        _rtmp3420 = input.readListBegin();
        _etype419 = _rtmp3420.etype;
        _size416 = _rtmp3420.size;
        for (var _i421 = 0; _i421 < _size416; ++_i421)
        {
          var elem422 = null;
          elem422 = input.readString();
          this.success.push(elem422);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_index_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_names_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter423 in this.success)
    {
      if (this.success.hasOwnProperty(iter423))
      {
        iter423 = this.success[iter423];
        output.writeString(iter423);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_role_args = function(args) {
  this.role = null;
  if (args) {
    if (args.role !== undefined) {
      this.role = args.role;
    }
  }
};
ThriftHiveMetastore_create_role_args.prototype = {};
ThriftHiveMetastore_create_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.role = new ttypes.Role();
        this.role.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_role_args');
  if (this.role) {
    output.writeFieldBegin('role', Thrift.Type.STRUCT, 1);
    this.role.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_create_role_result.prototype = {};
ThriftHiveMetastore_create_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_role_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_role_args = function(args) {
  this.role_name = null;
  if (args) {
    if (args.role_name !== undefined) {
      this.role_name = args.role_name;
    }
  }
};
ThriftHiveMetastore_drop_role_args.prototype = {};
ThriftHiveMetastore_drop_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.role_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_role_args');
  if (this.role_name) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1);
    output.writeString(this.role_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_drop_role_result.prototype = {};
ThriftHiveMetastore_drop_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_role_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_role_names_args = function(args) {
};
ThriftHiveMetastore_get_role_names_args.prototype = {};
ThriftHiveMetastore_get_role_names_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_role_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_role_names_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_role_names_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_role_names_result.prototype = {};
ThriftHiveMetastore_get_role_names_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size424 = 0;
        var _rtmp3428;
        this.success = [];
        var _etype427 = 0;
        _rtmp3428 = input.readListBegin();
        _etype427 = _rtmp3428.etype;
        _size424 = _rtmp3428.size;
        for (var _i429 = 0; _i429 < _size424; ++_i429)
        {
          var elem430 = null;
          elem430 = input.readString();
          this.success.push(elem430);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_role_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_role_names_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter431 in this.success)
    {
      if (this.success.hasOwnProperty(iter431))
      {
        iter431 = this.success[iter431];
        output.writeString(iter431);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_grant_role_args = function(args) {
  this.role_name = null;
  this.principal_name = null;
  this.principal_type = null;
  this.grantor = null;
  this.grantorType = null;
  this.grant_option = null;
  if (args) {
    if (args.role_name !== undefined) {
      this.role_name = args.role_name;
    }
    if (args.principal_name !== undefined) {
      this.principal_name = args.principal_name;
    }
    if (args.principal_type !== undefined) {
      this.principal_type = args.principal_type;
    }
    if (args.grantor !== undefined) {
      this.grantor = args.grantor;
    }
    if (args.grantorType !== undefined) {
      this.grantorType = args.grantorType;
    }
    if (args.grant_option !== undefined) {
      this.grant_option = args.grant_option;
    }
  }
};
ThriftHiveMetastore_grant_role_args.prototype = {};
ThriftHiveMetastore_grant_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.role_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.grantor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.grantorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.grant_option = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_role_args');
  if (this.role_name) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1);
    output.writeString(this.role_name);
    output.writeFieldEnd();
  }
  if (this.principal_name) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 2);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 3);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  if (this.grantor) {
    output.writeFieldBegin('grantor', Thrift.Type.STRING, 4);
    output.writeString(this.grantor);
    output.writeFieldEnd();
  }
  if (this.grantorType) {
    output.writeFieldBegin('grantorType', Thrift.Type.I32, 5);
    output.writeI32(this.grantorType);
    output.writeFieldEnd();
  }
  if (this.grant_option) {
    output.writeFieldBegin('grant_option', Thrift.Type.BOOL, 6);
    output.writeBool(this.grant_option);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_grant_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_grant_role_result.prototype = {};
ThriftHiveMetastore_grant_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_role_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_revoke_role_args = function(args) {
  this.role_name = null;
  this.principal_name = null;
  this.principal_type = null;
  if (args) {
    if (args.role_name !== undefined) {
      this.role_name = args.role_name;
    }
    if (args.principal_name !== undefined) {
      this.principal_name = args.principal_name;
    }
    if (args.principal_type !== undefined) {
      this.principal_type = args.principal_type;
    }
  }
};
ThriftHiveMetastore_revoke_role_args.prototype = {};
ThriftHiveMetastore_revoke_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.role_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_revoke_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_role_args');
  if (this.role_name) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1);
    output.writeString(this.role_name);
    output.writeFieldEnd();
  }
  if (this.principal_name) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 2);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 3);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_revoke_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_revoke_role_result.prototype = {};
ThriftHiveMetastore_revoke_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_revoke_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_role_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_list_roles_args = function(args) {
  this.principal_name = null;
  this.principal_type = null;
  if (args) {
    if (args.principal_name !== undefined) {
      this.principal_name = args.principal_name;
    }
    if (args.principal_type !== undefined) {
      this.principal_type = args.principal_type;
    }
  }
};
ThriftHiveMetastore_list_roles_args.prototype = {};
ThriftHiveMetastore_list_roles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_list_roles_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_roles_args');
  if (this.principal_name) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 1);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 2);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_list_roles_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_list_roles_result.prototype = {};
ThriftHiveMetastore_list_roles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size432 = 0;
        var _rtmp3436;
        this.success = [];
        var _etype435 = 0;
        _rtmp3436 = input.readListBegin();
        _etype435 = _rtmp3436.etype;
        _size432 = _rtmp3436.size;
        for (var _i437 = 0; _i437 < _size432; ++_i437)
        {
          var elem438 = null;
          elem438 = new ttypes.Role();
          elem438.read(input);
          this.success.push(elem438);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_list_roles_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_roles_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter439 in this.success)
    {
      if (this.success.hasOwnProperty(iter439))
      {
        iter439 = this.success[iter439];
        iter439.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_privilege_set_args = function(args) {
  this.hiveObject = null;
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.hiveObject !== undefined) {
      this.hiveObject = args.hiveObject;
    }
    if (args.user_name !== undefined) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined) {
      this.group_names = args.group_names;
    }
  }
};
ThriftHiveMetastore_get_privilege_set_args.prototype = {};
ThriftHiveMetastore_get_privilege_set_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hiveObject = new ttypes.HiveObjectRef();
        this.hiveObject.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size440 = 0;
        var _rtmp3444;
        this.group_names = [];
        var _etype443 = 0;
        _rtmp3444 = input.readListBegin();
        _etype443 = _rtmp3444.etype;
        _size440 = _rtmp3444.size;
        for (var _i445 = 0; _i445 < _size440; ++_i445)
        {
          var elem446 = null;
          elem446 = input.readString();
          this.group_names.push(elem446);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_privilege_set_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_privilege_set_args');
  if (this.hiveObject) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 1);
    this.hiveObject.write(output);
    output.writeFieldEnd();
  }
  if (this.user_name) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 2);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter447 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter447))
      {
        iter447 = this.group_names[iter447];
        output.writeString(iter447);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_privilege_set_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_privilege_set_result.prototype = {};
ThriftHiveMetastore_get_privilege_set_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PrincipalPrivilegeSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_privilege_set_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_privilege_set_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_list_privileges_args = function(args) {
  this.principal_name = null;
  this.principal_type = null;
  this.hiveObject = null;
  if (args) {
    if (args.principal_name !== undefined) {
      this.principal_name = args.principal_name;
    }
    if (args.principal_type !== undefined) {
      this.principal_type = args.principal_type;
    }
    if (args.hiveObject !== undefined) {
      this.hiveObject = args.hiveObject;
    }
  }
};
ThriftHiveMetastore_list_privileges_args.prototype = {};
ThriftHiveMetastore_list_privileges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.hiveObject = new ttypes.HiveObjectRef();
        this.hiveObject.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_list_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_privileges_args');
  if (this.principal_name) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 1);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 2);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  if (this.hiveObject) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 3);
    this.hiveObject.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_list_privileges_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_list_privileges_result.prototype = {};
ThriftHiveMetastore_list_privileges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size448 = 0;
        var _rtmp3452;
        this.success = [];
        var _etype451 = 0;
        _rtmp3452 = input.readListBegin();
        _etype451 = _rtmp3452.etype;
        _size448 = _rtmp3452.size;
        for (var _i453 = 0; _i453 < _size448; ++_i453)
        {
          var elem454 = null;
          elem454 = new ttypes.HiveObjectPrivilege();
          elem454.read(input);
          this.success.push(elem454);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_list_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_privileges_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter455 in this.success)
    {
      if (this.success.hasOwnProperty(iter455))
      {
        iter455 = this.success[iter455];
        iter455.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_grant_privileges_args = function(args) {
  this.privileges = null;
  if (args) {
    if (args.privileges !== undefined) {
      this.privileges = args.privileges;
    }
  }
};
ThriftHiveMetastore_grant_privileges_args.prototype = {};
ThriftHiveMetastore_grant_privileges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrivilegeBag();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_privileges_args');
  if (this.privileges) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 1);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_grant_privileges_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_grant_privileges_result.prototype = {};
ThriftHiveMetastore_grant_privileges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_privileges_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_revoke_privileges_args = function(args) {
  this.privileges = null;
  if (args) {
    if (args.privileges !== undefined) {
      this.privileges = args.privileges;
    }
  }
};
ThriftHiveMetastore_revoke_privileges_args.prototype = {};
ThriftHiveMetastore_revoke_privileges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrivilegeBag();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_revoke_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_privileges_args');
  if (this.privileges) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 1);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_revoke_privileges_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_revoke_privileges_result.prototype = {};
ThriftHiveMetastore_revoke_privileges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_revoke_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_privileges_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_delegation_token_args = function(args) {
  this.renewer_kerberos_principal_name = null;
  if (args) {
    if (args.renewer_kerberos_principal_name !== undefined) {
      this.renewer_kerberos_principal_name = args.renewer_kerberos_principal_name;
    }
  }
};
ThriftHiveMetastore_get_delegation_token_args.prototype = {};
ThriftHiveMetastore_get_delegation_token_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.renewer_kerberos_principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_delegation_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_args');
  if (this.renewer_kerberos_principal_name) {
    output.writeFieldBegin('renewer_kerberos_principal_name', Thrift.Type.STRING, 1);
    output.writeString(this.renewer_kerberos_principal_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_delegation_token_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_delegation_token_result.prototype = {};
ThriftHiveMetastore_get_delegation_token_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_delegation_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_delegation_token_with_signature_args = function(args) {
  this.renewer_kerberos_principal_name = null;
  this.token_signature = null;
  if (args) {
    if (args.renewer_kerberos_principal_name !== undefined) {
      this.renewer_kerberos_principal_name = args.renewer_kerberos_principal_name;
    }
    if (args.token_signature !== undefined) {
      this.token_signature = args.token_signature;
    }
  }
};
ThriftHiveMetastore_get_delegation_token_with_signature_args.prototype = {};
ThriftHiveMetastore_get_delegation_token_with_signature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.renewer_kerberos_principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token_signature = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_delegation_token_with_signature_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_with_signature_args');
  if (this.renewer_kerberos_principal_name) {
    output.writeFieldBegin('renewer_kerberos_principal_name', Thrift.Type.STRING, 1);
    output.writeString(this.renewer_kerberos_principal_name);
    output.writeFieldEnd();
  }
  if (this.token_signature) {
    output.writeFieldBegin('token_signature', Thrift.Type.STRING, 2);
    output.writeString(this.token_signature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_delegation_token_with_signature_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_delegation_token_with_signature_result.prototype = {};
ThriftHiveMetastore_get_delegation_token_with_signature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_delegation_token_with_signature_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_with_signature_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_renew_delegation_token_args = function(args) {
  this.token_str_form = null;
  if (args) {
    if (args.token_str_form !== undefined) {
      this.token_str_form = args.token_str_form;
    }
  }
};
ThriftHiveMetastore_renew_delegation_token_args.prototype = {};
ThriftHiveMetastore_renew_delegation_token_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token_str_form = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_renew_delegation_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_renew_delegation_token_args');
  if (this.token_str_form) {
    output.writeFieldBegin('token_str_form', Thrift.Type.STRING, 1);
    output.writeString(this.token_str_form);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_renew_delegation_token_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_renew_delegation_token_result.prototype = {};
ThriftHiveMetastore_renew_delegation_token_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_renew_delegation_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_renew_delegation_token_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_cancel_delegation_token_args = function(args) {
  this.token_str_form = null;
  if (args) {
    if (args.token_str_form !== undefined) {
      this.token_str_form = args.token_str_form;
    }
  }
};
ThriftHiveMetastore_cancel_delegation_token_args.prototype = {};
ThriftHiveMetastore_cancel_delegation_token_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token_str_form = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_cancel_delegation_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_cancel_delegation_token_args');
  if (this.token_str_form) {
    output.writeFieldBegin('token_str_form', Thrift.Type.STRING, 1);
    output.writeString(this.token_str_form);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_cancel_delegation_token_result = function(args) {
  this.o1 = null;
  if (args) {
    if (args.o1 !== undefined) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_cancel_delegation_token_result.prototype = {};
ThriftHiveMetastore_cancel_delegation_token_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_cancel_delegation_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_cancel_delegation_token_result');
  if (this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastoreClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
Thrift.inherits(ThriftHiveMetastoreClient, FacebookServiceClient)
ThriftHiveMetastoreClient.prototype.create_database = function(database, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_create_database(database);
};

ThriftHiveMetastoreClient.prototype.send_create_database = function(database) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_database', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_create_database_args();
  args.database = database;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_database_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.get_database = function(name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_database(name);
};

ThriftHiveMetastoreClient.prototype.send_get_database = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_database', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_database_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_database_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_database failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_database = function(name, deleteData, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_drop_database(name, deleteData);
};

ThriftHiveMetastoreClient.prototype.send_drop_database = function(name, deleteData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_database', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_drop_database_args();
  args.name = name;
  args.deleteData = deleteData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_database_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.get_databases = function(pattern, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_databases(pattern);
};

ThriftHiveMetastoreClient.prototype.send_get_databases = function(pattern) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_databases_args();
  args.pattern = pattern;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_databases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_databases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_databases failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_all_databases = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_all_databases();
};

ThriftHiveMetastoreClient.prototype.send_get_all_databases = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_all_databases', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_all_databases_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_all_databases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_all_databases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_databases failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.alter_database = function(dbname, db, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_alter_database(dbname, db);
};

ThriftHiveMetastoreClient.prototype.send_alter_database = function(dbname, db) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_database', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_alter_database_args();
  args.dbname = dbname;
  args.db = db;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_database_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.get_type = function(name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_type(name);
};

ThriftHiveMetastoreClient.prototype.send_get_type = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_type', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_type_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_type failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.create_type = function(type, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_create_type(type);
};

ThriftHiveMetastoreClient.prototype.send_create_type = function(type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_type', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_create_type_args();
  args.type = type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_type failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_type = function(type, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_drop_type(type);
};

ThriftHiveMetastoreClient.prototype.send_drop_type = function(type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_type', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_drop_type_args();
  args.type = type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_type failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_type_all = function(name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_type_all(name);
};

ThriftHiveMetastoreClient.prototype.send_get_type_all = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_type_all', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_type_all_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_type_all = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_type_all_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_type_all failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_fields = function(db_name, table_name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_fields(db_name, table_name);
};

ThriftHiveMetastoreClient.prototype.send_get_fields = function(db_name, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_fields', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_fields_args();
  args.db_name = db_name;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_fields = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_fields_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_fields failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_schema = function(db_name, table_name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_schema(db_name, table_name);
};

ThriftHiveMetastoreClient.prototype.send_get_schema = function(db_name, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_schema', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_schema_args();
  args.db_name = db_name;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_schema = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_schema_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_schema failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.create_table = function(tbl, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_create_table(tbl);
};

ThriftHiveMetastoreClient.prototype.send_create_table = function(tbl) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_create_table_args();
  args.tbl = tbl;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.drop_table = function(dbname, name, deleteData, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_drop_table(dbname, name, deleteData);
};

ThriftHiveMetastoreClient.prototype.send_drop_table = function(dbname, name, deleteData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_table', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_drop_table_args();
  args.dbname = dbname;
  args.name = name;
  args.deleteData = deleteData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.get_tables = function(db_name, pattern, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_tables(db_name, pattern);
};

ThriftHiveMetastoreClient.prototype.send_get_tables = function(db_name, pattern) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_tables_args();
  args.db_name = db_name;
  args.pattern = pattern;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_tables failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_all_tables = function(db_name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_all_tables(db_name);
};

ThriftHiveMetastoreClient.prototype.send_get_all_tables = function(db_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_all_tables', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_all_tables_args();
  args.db_name = db_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_all_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_all_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_tables failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_table = function(dbname, tbl_name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_table(dbname, tbl_name);
};

ThriftHiveMetastoreClient.prototype.send_get_table = function(dbname, tbl_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_table_args();
  args.dbname = dbname;
  args.tbl_name = tbl_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.alter_table = function(dbname, tbl_name, new_tbl, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_alter_table(dbname, tbl_name, new_tbl);
};

ThriftHiveMetastoreClient.prototype.send_alter_table = function(dbname, tbl_name, new_tbl) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_table', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_alter_table_args();
  args.dbname = dbname;
  args.tbl_name = tbl_name;
  args.new_tbl = new_tbl;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.add_partition = function(new_part, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_add_partition(new_part);
};

ThriftHiveMetastoreClient.prototype.send_add_partition = function(new_part) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_partition', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_add_partition_args();
  args.new_part = new_part;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_add_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_partition failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.append_partition = function(db_name, tbl_name, part_vals, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_append_partition(db_name, tbl_name, part_vals);
};

ThriftHiveMetastoreClient.prototype.send_append_partition = function(db_name, tbl_name, part_vals) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append_partition', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_append_partition_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_append_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_append_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('append_partition failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.append_partition_by_name = function(db_name, tbl_name, part_name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_append_partition_by_name(db_name, tbl_name, part_name);
};

ThriftHiveMetastoreClient.prototype.send_append_partition_by_name = function(db_name, tbl_name, part_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append_partition_by_name', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_append_partition_by_name_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_name = part_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_append_partition_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_append_partition_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('append_partition_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_partition = function(db_name, tbl_name, part_vals, deleteData, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_drop_partition(db_name, tbl_name, part_vals, deleteData);
};

ThriftHiveMetastoreClient.prototype.send_drop_partition = function(db_name, tbl_name, part_vals, deleteData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_partition', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_drop_partition_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.deleteData = deleteData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_partition failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_partition_by_name = function(db_name, tbl_name, part_name, deleteData, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData);
};

ThriftHiveMetastoreClient.prototype.send_drop_partition_by_name = function(db_name, tbl_name, part_name, deleteData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_partition_by_name', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_drop_partition_by_name_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_name = part_name;
  args.deleteData = deleteData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_partition_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_partition_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_partition_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition = function(db_name, tbl_name, part_vals, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_partition(db_name, tbl_name, part_vals);
};

ThriftHiveMetastoreClient.prototype.send_get_partition = function(db_name, tbl_name, part_vals) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_partition_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_with_auth = function(db_name, tbl_name, part_vals, user_name, group_names, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names);
};

ThriftHiveMetastoreClient.prototype.send_get_partition_with_auth = function(db_name, tbl_name, part_vals, user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_with_auth', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_partition_with_auth_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.user_name = user_name;
  args.group_names = group_names;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_with_auth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_with_auth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_with_auth failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_by_name = function(db_name, tbl_name, part_name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_partition_by_name(db_name, tbl_name, part_name);
};

ThriftHiveMetastoreClient.prototype.send_get_partition_by_name = function(db_name, tbl_name, part_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_by_name', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_partition_by_name_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_name = part_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions = function(db_name, tbl_name, max_parts, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_partitions(db_name, tbl_name, max_parts);
};

ThriftHiveMetastoreClient.prototype.send_get_partitions = function(db_name, tbl_name, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_partitions_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.max_parts = max_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_with_auth = function(db_name, tbl_name, max_parts, user_name, group_names, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names);
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_with_auth = function(db_name, tbl_name, max_parts, user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_with_auth', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_partitions_with_auth_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.max_parts = max_parts;
  args.user_name = user_name;
  args.group_names = group_names;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_with_auth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_with_auth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_with_auth failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_names = function(db_name, tbl_name, max_parts, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_partition_names(db_name, tbl_name, max_parts);
};

ThriftHiveMetastoreClient.prototype.send_get_partition_names = function(db_name, tbl_name, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_names', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_partition_names_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.max_parts = max_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_names_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_names failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_ps = function(db_name, tbl_name, part_vals, max_parts, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts);
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_ps = function(db_name, tbl_name, part_vals, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_ps', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_partitions_ps_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.max_parts = max_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_ps = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_ps_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_ps failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_ps_with_auth = function(db_name, tbl_name, part_vals, max_parts, user_name, group_names, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names);
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_ps_with_auth = function(db_name, tbl_name, part_vals, max_parts, user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_ps_with_auth', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_partitions_ps_with_auth_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.max_parts = max_parts;
  args.user_name = user_name;
  args.group_names = group_names;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_ps_with_auth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_ps_with_auth failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_names_ps = function(db_name, tbl_name, part_vals, max_parts, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts);
};

ThriftHiveMetastoreClient.prototype.send_get_partition_names_ps = function(db_name, tbl_name, part_vals, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_names_ps', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_partition_names_ps_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.part_vals = part_vals;
  args.max_parts = max_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_names_ps = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_names_ps_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_names_ps failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_by_filter = function(db_name, tbl_name, filter, max_parts, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts);
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_by_filter = function(db_name, tbl_name, filter, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_by_filter', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_partitions_by_filter_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.filter = filter;
  args.max_parts = max_parts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_by_filter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_by_filter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_by_filter failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.alter_partition = function(db_name, tbl_name, new_part, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_alter_partition(db_name, tbl_name, new_part);
};

ThriftHiveMetastoreClient.prototype.send_alter_partition = function(db_name, tbl_name, new_part) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_partition', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_alter_partition_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.new_part = new_part;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.get_config_value = function(name, defaultValue, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_config_value(name, defaultValue);
};

ThriftHiveMetastoreClient.prototype.send_get_config_value = function(name, defaultValue) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_config_value', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_config_value_args();
  args.name = name;
  args.defaultValue = defaultValue;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_config_value = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_config_value_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_config_value failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.partition_name_to_vals = function(part_name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_partition_name_to_vals(part_name);
};

ThriftHiveMetastoreClient.prototype.send_partition_name_to_vals = function(part_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('partition_name_to_vals', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_partition_name_to_vals_args();
  args.part_name = part_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_partition_name_to_vals = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_partition_name_to_vals_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('partition_name_to_vals failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.partition_name_to_spec = function(part_name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_partition_name_to_spec(part_name);
};

ThriftHiveMetastoreClient.prototype.send_partition_name_to_spec = function(part_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('partition_name_to_spec', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_partition_name_to_spec_args();
  args.part_name = part_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_partition_name_to_spec = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_partition_name_to_spec_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('partition_name_to_spec failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.add_index = function(new_index, index_table, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_add_index(new_index, index_table);
};

ThriftHiveMetastoreClient.prototype.send_add_index = function(new_index, index_table) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_index', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_add_index_args();
  args.new_index = new_index;
  args.index_table = index_table;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_add_index = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_index_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_index failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.alter_index = function(dbname, base_tbl_name, idx_name, new_idx, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_alter_index(dbname, base_tbl_name, idx_name, new_idx);
};

ThriftHiveMetastoreClient.prototype.send_alter_index = function(dbname, base_tbl_name, idx_name, new_idx) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_index', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_alter_index_args();
  args.dbname = dbname;
  args.base_tbl_name = base_tbl_name;
  args.idx_name = idx_name;
  args.new_idx = new_idx;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_index = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_index_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null)
};
ThriftHiveMetastoreClient.prototype.drop_index_by_name = function(db_name, tbl_name, index_name, deleteData, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_drop_index_by_name(db_name, tbl_name, index_name, deleteData);
};

ThriftHiveMetastoreClient.prototype.send_drop_index_by_name = function(db_name, tbl_name, index_name, deleteData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_index_by_name', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_drop_index_by_name_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.index_name = index_name;
  args.deleteData = deleteData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_index_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_index_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_index_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_index_by_name = function(db_name, tbl_name, index_name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_index_by_name(db_name, tbl_name, index_name);
};

ThriftHiveMetastoreClient.prototype.send_get_index_by_name = function(db_name, tbl_name, index_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_index_by_name', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_index_by_name_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.index_name = index_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_index_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_index_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_index_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_indexes = function(db_name, tbl_name, max_indexes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_indexes(db_name, tbl_name, max_indexes);
};

ThriftHiveMetastoreClient.prototype.send_get_indexes = function(db_name, tbl_name, max_indexes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_indexes', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_indexes_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.max_indexes = max_indexes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_indexes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_indexes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_indexes failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_index_names = function(db_name, tbl_name, max_indexes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_index_names(db_name, tbl_name, max_indexes);
};

ThriftHiveMetastoreClient.prototype.send_get_index_names = function(db_name, tbl_name, max_indexes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_index_names', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_index_names_args();
  args.db_name = db_name;
  args.tbl_name = tbl_name;
  args.max_indexes = max_indexes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_index_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_index_names_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_index_names failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.create_role = function(role, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_create_role(role);
};

ThriftHiveMetastoreClient.prototype.send_create_role = function(role) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_role', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_create_role_args();
  args.role = role;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_role = function(role_name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_drop_role(role_name);
};

ThriftHiveMetastoreClient.prototype.send_drop_role = function(role_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_role', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_drop_role_args();
  args.role_name = role_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_role_names = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_role_names();
};

ThriftHiveMetastoreClient.prototype.send_get_role_names = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_role_names', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_role_names_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_role_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_role_names_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_role_names failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.grant_role = function(role_name, principal_name, principal_type, grantor, grantorType, grant_option, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option);
};

ThriftHiveMetastoreClient.prototype.send_grant_role = function(role_name, principal_name, principal_type, grantor, grantorType, grant_option) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grant_role', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_grant_role_args();
  args.role_name = role_name;
  args.principal_name = principal_name;
  args.principal_type = principal_type;
  args.grantor = grantor;
  args.grantorType = grantorType;
  args.grant_option = grant_option;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_grant_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_grant_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('grant_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.revoke_role = function(role_name, principal_name, principal_type, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_revoke_role(role_name, principal_name, principal_type);
};

ThriftHiveMetastoreClient.prototype.send_revoke_role = function(role_name, principal_name, principal_type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revoke_role', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_revoke_role_args();
  args.role_name = role_name;
  args.principal_name = principal_name;
  args.principal_type = principal_type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_revoke_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_revoke_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('revoke_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.list_roles = function(principal_name, principal_type, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_list_roles(principal_name, principal_type);
};

ThriftHiveMetastoreClient.prototype.send_list_roles = function(principal_name, principal_type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('list_roles', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_list_roles_args();
  args.principal_name = principal_name;
  args.principal_type = principal_type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_list_roles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_list_roles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('list_roles failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_privilege_set = function(hiveObject, user_name, group_names, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_privilege_set(hiveObject, user_name, group_names);
};

ThriftHiveMetastoreClient.prototype.send_get_privilege_set = function(hiveObject, user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_privilege_set', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_privilege_set_args();
  args.hiveObject = hiveObject;
  args.user_name = user_name;
  args.group_names = group_names;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_privilege_set = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_privilege_set_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_privilege_set failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.list_privileges = function(principal_name, principal_type, hiveObject, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_list_privileges(principal_name, principal_type, hiveObject);
};

ThriftHiveMetastoreClient.prototype.send_list_privileges = function(principal_name, principal_type, hiveObject) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('list_privileges', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_list_privileges_args();
  args.principal_name = principal_name;
  args.principal_type = principal_type;
  args.hiveObject = hiveObject;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_list_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_list_privileges_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('list_privileges failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.grant_privileges = function(privileges, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_grant_privileges(privileges);
};

ThriftHiveMetastoreClient.prototype.send_grant_privileges = function(privileges) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grant_privileges', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_grant_privileges_args();
  args.privileges = privileges;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_grant_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_grant_privileges_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('grant_privileges failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.revoke_privileges = function(privileges, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_revoke_privileges(privileges);
};

ThriftHiveMetastoreClient.prototype.send_revoke_privileges = function(privileges) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revoke_privileges', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_revoke_privileges_args();
  args.privileges = privileges;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_revoke_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_revoke_privileges_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('revoke_privileges failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_delegation_token = function(renewer_kerberos_principal_name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_delegation_token(renewer_kerberos_principal_name);
};

ThriftHiveMetastoreClient.prototype.send_get_delegation_token = function(renewer_kerberos_principal_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_delegation_token', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_delegation_token_args();
  args.renewer_kerberos_principal_name = renewer_kerberos_principal_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_delegation_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_delegation_token_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_delegation_token failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_delegation_token_with_signature = function(renewer_kerberos_principal_name, token_signature, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_delegation_token_with_signature(renewer_kerberos_principal_name, token_signature);
};

ThriftHiveMetastoreClient.prototype.send_get_delegation_token_with_signature = function(renewer_kerberos_principal_name, token_signature) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_delegation_token_with_signature', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_get_delegation_token_with_signature_args();
  args.renewer_kerberos_principal_name = renewer_kerberos_principal_name;
  args.token_signature = token_signature;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_delegation_token_with_signature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_delegation_token_with_signature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_delegation_token_with_signature failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.renew_delegation_token = function(token_str_form, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_renew_delegation_token(token_str_form);
};

ThriftHiveMetastoreClient.prototype.send_renew_delegation_token = function(token_str_form) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('renew_delegation_token', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_renew_delegation_token_args();
  args.token_str_form = token_str_form;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_renew_delegation_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_renew_delegation_token_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('renew_delegation_token failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.cancel_delegation_token = function(token_str_form, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_cancel_delegation_token(token_str_form);
};

ThriftHiveMetastoreClient.prototype.send_cancel_delegation_token = function(token_str_form) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancel_delegation_token', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftHiveMetastore_cancel_delegation_token_args();
  args.token_str_form = token_str_form;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_cancel_delegation_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_cancel_delegation_token_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  callback(null)
};
var ThriftHiveMetastoreProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ThriftHiveMetastoreProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_database_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_create_database_result();
  this._handler.create_database(args.database, function (success) {
    result.success = success;
    output.writeMessageBegin("create_database", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_database_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_database_result();
  this._handler.get_database(args.name, function (success) {
    result.success = success;
    output.writeMessageBegin("get_database", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_database_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_drop_database_result();
  this._handler.drop_database(args.name, args.deleteData, function (success) {
    result.success = success;
    output.writeMessageBegin("drop_database", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_databases = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_databases_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_databases_result();
  this._handler.get_databases(args.pattern, function (success) {
    result.success = success;
    output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_all_databases = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_databases_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_all_databases_result();
  this._handler.get_all_databases(function (success) {
    result.success = success;
    output.writeMessageBegin("get_all_databases", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_alter_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_database_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_alter_database_result();
  this._handler.alter_database(args.dbname, args.db, function (success) {
    result.success = success;
    output.writeMessageBegin("alter_database", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_type_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_type_result();
  this._handler.get_type(args.name, function (success) {
    result.success = success;
    output.writeMessageBegin("get_type", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_create_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_type_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_create_type_result();
  this._handler.create_type(args.type, function (success) {
    result.success = success;
    output.writeMessageBegin("create_type", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_type_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_drop_type_result();
  this._handler.drop_type(args.type, function (success) {
    result.success = success;
    output.writeMessageBegin("drop_type", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_type_all = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_type_all_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_type_all_result();
  this._handler.get_type_all(args.name, function (success) {
    result.success = success;
    output.writeMessageBegin("get_type_all", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_fields = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_fields_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_fields_result();
  this._handler.get_fields(args.db_name, args.table_name, function (success) {
    result.success = success;
    output.writeMessageBegin("get_fields", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_schema = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_schema_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_schema_result();
  this._handler.get_schema(args.db_name, args.table_name, function (success) {
    result.success = success;
    output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_create_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_table_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_create_table_result();
  this._handler.create_table(args.tbl, function (success) {
    result.success = success;
    output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_table_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_drop_table_result();
  this._handler.drop_table(args.dbname, args.name, args.deleteData, function (success) {
    result.success = success;
    output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_tables = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_tables_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_tables_result();
  this._handler.get_tables(args.db_name, args.pattern, function (success) {
    result.success = success;
    output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_all_tables = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_tables_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_all_tables_result();
  this._handler.get_all_tables(args.db_name, function (success) {
    result.success = success;
    output.writeMessageBegin("get_all_tables", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_table_result();
  this._handler.get_table(args.dbname, args.tbl_name, function (success) {
    result.success = success;
    output.writeMessageBegin("get_table", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_alter_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_table_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_alter_table_result();
  this._handler.alter_table(args.dbname, args.tbl_name, args.new_tbl, function (success) {
    result.success = success;
    output.writeMessageBegin("alter_table", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_add_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partition_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_add_partition_result();
  this._handler.add_partition(args.new_part, function (success) {
    result.success = success;
    output.writeMessageBegin("add_partition", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_append_partition_result();
  this._handler.append_partition(args.db_name, args.tbl_name, args.part_vals, function (success) {
    result.success = success;
    output.writeMessageBegin("append_partition", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_by_name_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_append_partition_by_name_result();
  this._handler.append_partition_by_name(args.db_name, args.tbl_name, args.part_name, function (success) {
    result.success = success;
    output.writeMessageBegin("append_partition_by_name", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_drop_partition_result();
  this._handler.drop_partition(args.db_name, args.tbl_name, args.part_vals, args.deleteData, function (success) {
    result.success = success;
    output.writeMessageBegin("drop_partition", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_by_name_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_drop_partition_by_name_result();
  this._handler.drop_partition_by_name(args.db_name, args.tbl_name, args.part_name, args.deleteData, function (success) {
    result.success = success;
    output.writeMessageBegin("drop_partition_by_name", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_partition_result();
  this._handler.get_partition(args.db_name, args.tbl_name, args.part_vals, function (success) {
    result.success = success;
    output.writeMessageBegin("get_partition", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_with_auth_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_partition_with_auth_result();
  this._handler.get_partition_with_auth(args.db_name, args.tbl_name, args.part_vals, args.user_name, args.group_names, function (success) {
    result.success = success;
    output.writeMessageBegin("get_partition_with_auth", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_by_name_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_partition_by_name_result();
  this._handler.get_partition_by_name(args.db_name, args.tbl_name, args.part_name, function (success) {
    result.success = success;
    output.writeMessageBegin("get_partition_by_name", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_partitions_result();
  this._handler.get_partitions(args.db_name, args.tbl_name, args.max_parts, function (success) {
    result.success = success;
    output.writeMessageBegin("get_partitions", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_with_auth_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_partitions_with_auth_result();
  this._handler.get_partitions_with_auth(args.db_name, args.tbl_name, args.max_parts, args.user_name, args.group_names, function (success) {
    result.success = success;
    output.writeMessageBegin("get_partitions_with_auth", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_names_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_partition_names_result();
  this._handler.get_partition_names(args.db_name, args.tbl_name, args.max_parts, function (success) {
    result.success = success;
    output.writeMessageBegin("get_partition_names", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_ps = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_ps_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_partitions_ps_result();
  this._handler.get_partitions_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts, function (success) {
    result.success = success;
    output.writeMessageBegin("get_partitions_ps", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_ps_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_ps_with_auth_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result();
  this._handler.get_partitions_ps_with_auth(args.db_name, args.tbl_name, args.part_vals, args.max_parts, args.user_name, args.group_names, function (success) {
    result.success = success;
    output.writeMessageBegin("get_partitions_ps_with_auth", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_names_ps = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_names_ps_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_partition_names_ps_result();
  this._handler.get_partition_names_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts, function (success) {
    result.success = success;
    output.writeMessageBegin("get_partition_names_ps", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_by_filter = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_by_filter_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_partitions_by_filter_result();
  this._handler.get_partitions_by_filter(args.db_name, args.tbl_name, args.filter, args.max_parts, function (success) {
    result.success = success;
    output.writeMessageBegin("get_partitions_by_filter", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_alter_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_partition_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_alter_partition_result();
  this._handler.alter_partition(args.db_name, args.tbl_name, args.new_part, function (success) {
    result.success = success;
    output.writeMessageBegin("alter_partition", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_config_value = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_config_value_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_config_value_result();
  this._handler.get_config_value(args.name, args.defaultValue, function (success) {
    result.success = success;
    output.writeMessageBegin("get_config_value", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_partition_name_to_vals = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_to_vals_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_partition_name_to_vals_result();
  this._handler.partition_name_to_vals(args.part_name, function (success) {
    result.success = success;
    output.writeMessageBegin("partition_name_to_vals", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_partition_name_to_spec = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_to_spec_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_partition_name_to_spec_result();
  this._handler.partition_name_to_spec(args.part_name, function (success) {
    result.success = success;
    output.writeMessageBegin("partition_name_to_spec", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_add_index = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_index_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_add_index_result();
  this._handler.add_index(args.new_index, args.index_table, function (success) {
    result.success = success;
    output.writeMessageBegin("add_index", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_alter_index = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_index_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_alter_index_result();
  this._handler.alter_index(args.dbname, args.base_tbl_name, args.idx_name, args.new_idx, function (success) {
    result.success = success;
    output.writeMessageBegin("alter_index", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_index_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_index_by_name_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_drop_index_by_name_result();
  this._handler.drop_index_by_name(args.db_name, args.tbl_name, args.index_name, args.deleteData, function (success) {
    result.success = success;
    output.writeMessageBegin("drop_index_by_name", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_index_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_index_by_name_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_index_by_name_result();
  this._handler.get_index_by_name(args.db_name, args.tbl_name, args.index_name, function (success) {
    result.success = success;
    output.writeMessageBegin("get_index_by_name", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_indexes = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_indexes_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_indexes_result();
  this._handler.get_indexes(args.db_name, args.tbl_name, args.max_indexes, function (success) {
    result.success = success;
    output.writeMessageBegin("get_indexes", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_index_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_index_names_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_index_names_result();
  this._handler.get_index_names(args.db_name, args.tbl_name, args.max_indexes, function (success) {
    result.success = success;
    output.writeMessageBegin("get_index_names", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_create_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_role_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_create_role_result();
  this._handler.create_role(args.role, function (success) {
    result.success = success;
    output.writeMessageBegin("create_role", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_role_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_drop_role_result();
  this._handler.drop_role(args.role_name, function (success) {
    result.success = success;
    output.writeMessageBegin("drop_role", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_role_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_role_names_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_role_names_result();
  this._handler.get_role_names(function (success) {
    result.success = success;
    output.writeMessageBegin("get_role_names", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_grant_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_role_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_grant_role_result();
  this._handler.grant_role(args.role_name, args.principal_name, args.principal_type, args.grantor, args.grantorType, args.grant_option, function (success) {
    result.success = success;
    output.writeMessageBegin("grant_role", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_revoke_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_revoke_role_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_revoke_role_result();
  this._handler.revoke_role(args.role_name, args.principal_name, args.principal_type, function (success) {
    result.success = success;
    output.writeMessageBegin("revoke_role", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_list_roles = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_list_roles_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_list_roles_result();
  this._handler.list_roles(args.principal_name, args.principal_type, function (success) {
    result.success = success;
    output.writeMessageBegin("list_roles", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_privilege_set = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_privilege_set_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_privilege_set_result();
  this._handler.get_privilege_set(args.hiveObject, args.user_name, args.group_names, function (success) {
    result.success = success;
    output.writeMessageBegin("get_privilege_set", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_list_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_list_privileges_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_list_privileges_result();
  this._handler.list_privileges(args.principal_name, args.principal_type, args.hiveObject, function (success) {
    result.success = success;
    output.writeMessageBegin("list_privileges", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_grant_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_privileges_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_grant_privileges_result();
  this._handler.grant_privileges(args.privileges, function (success) {
    result.success = success;
    output.writeMessageBegin("grant_privileges", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_revoke_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_revoke_privileges_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_revoke_privileges_result();
  this._handler.revoke_privileges(args.privileges, function (success) {
    result.success = success;
    output.writeMessageBegin("revoke_privileges", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_delegation_token_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_delegation_token_result();
  this._handler.get_delegation_token(args.renewer_kerberos_principal_name, function (success) {
    result.success = success;
    output.writeMessageBegin("get_delegation_token", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_delegation_token_with_signature = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_delegation_token_with_signature_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_get_delegation_token_with_signature_result();
  this._handler.get_delegation_token_with_signature(args.renewer_kerberos_principal_name, args.token_signature, function (success) {
    result.success = success;
    output.writeMessageBegin("get_delegation_token_with_signature", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_renew_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_renew_delegation_token_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_renew_delegation_token_result();
  this._handler.renew_delegation_token(args.token_str_form, function (success) {
    result.success = success;
    output.writeMessageBegin("renew_delegation_token", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ThriftHiveMetastoreProcessor.prototype.process_cancel_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_cancel_delegation_token_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ThriftHiveMetastore_cancel_delegation_token_result();
  this._handler.cancel_delegation_token(args.token_str_form, function (success) {
    result.success = success;
    output.writeMessageBegin("cancel_delegation_token", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

