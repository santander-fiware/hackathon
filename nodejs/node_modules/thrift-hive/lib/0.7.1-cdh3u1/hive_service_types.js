//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.JobTrackerState = {
'INITIALIZING' : 1,
'RUNNING' : 2
};
var HiveClusterStatus = module.exports.HiveClusterStatus = function(args) {
  this.taskTrackers = null;
  this.mapTasks = null;
  this.reduceTasks = null;
  this.maxMapTasks = null;
  this.maxReduceTasks = null;
  this.state = null;
  if (args) {
    if (args.taskTrackers !== undefined) {
      this.taskTrackers = args.taskTrackers;
    }
    if (args.mapTasks !== undefined) {
      this.mapTasks = args.mapTasks;
    }
    if (args.reduceTasks !== undefined) {
      this.reduceTasks = args.reduceTasks;
    }
    if (args.maxMapTasks !== undefined) {
      this.maxMapTasks = args.maxMapTasks;
    }
    if (args.maxReduceTasks !== undefined) {
      this.maxReduceTasks = args.maxReduceTasks;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
HiveClusterStatus.prototype = {};
HiveClusterStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.taskTrackers = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mapTasks = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.reduceTasks = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxMapTasks = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.maxReduceTasks = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HiveClusterStatus.prototype.write = function(output) {
  output.writeStructBegin('HiveClusterStatus');
  if (this.taskTrackers) {
    output.writeFieldBegin('taskTrackers', Thrift.Type.I32, 1);
    output.writeI32(this.taskTrackers);
    output.writeFieldEnd();
  }
  if (this.mapTasks) {
    output.writeFieldBegin('mapTasks', Thrift.Type.I32, 2);
    output.writeI32(this.mapTasks);
    output.writeFieldEnd();
  }
  if (this.reduceTasks) {
    output.writeFieldBegin('reduceTasks', Thrift.Type.I32, 3);
    output.writeI32(this.reduceTasks);
    output.writeFieldEnd();
  }
  if (this.maxMapTasks) {
    output.writeFieldBegin('maxMapTasks', Thrift.Type.I32, 4);
    output.writeI32(this.maxMapTasks);
    output.writeFieldEnd();
  }
  if (this.maxReduceTasks) {
    output.writeFieldBegin('maxReduceTasks', Thrift.Type.I32, 5);
    output.writeI32(this.maxReduceTasks);
    output.writeFieldEnd();
  }
  if (this.state) {
    output.writeFieldBegin('state', Thrift.Type.I32, 6);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HiveServerException = module.exports.HiveServerException = function(args) {
  Thrift.TException.call(this, "HiveServerException")
  this.name = "HiveServerException"
  this.message = null;
  this.errorCode = null;
  this.SQLState = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.errorCode !== undefined) {
      this.errorCode = args.errorCode;
    }
    if (args.SQLState !== undefined) {
      this.SQLState = args.SQLState;
    }
  }
};
Thrift.inherits(HiveServerException, Thrift.TException);
HiveServerException.prototype.name = 'HiveServerException';
HiveServerException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.SQLState = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HiveServerException.prototype.write = function(output) {
  output.writeStructBegin('HiveServerException');
  if (this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.errorCode) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 2);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.SQLState) {
    output.writeFieldBegin('SQLState', Thrift.Type.STRING, 3);
    output.writeString(this.SQLState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

