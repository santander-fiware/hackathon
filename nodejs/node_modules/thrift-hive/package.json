{
  "name": "thrift-hive",
  "description": "Hive client using the Apache Thrift RPC system",
  "version": "0.0.7",
  "author": {
    "name": "David Worms"
  },
  "contributors": [
    {
      "name": "David Worms",
      "email": "david@adaltas.com"
    }
  ],
  "dependencies": {
    "thrift": "latest",
    "each": "latest"
  },
  "devDependencies": {
    "coffee-script": "latest",
    "mocha": "latest",
    "should": "latest"
  },
  "keywords": [
    "hive",
    "nosql",
    "hadoop"
  ],
  "main": "index",
  "engines": {
    "node": ">= 0.4.7"
  },
  "readme": "# Thrift Hive - Hive client using the Apache Thrift RPC system\n\nHive client with the following main features:\n- fetch rows with optional batch size\n- implement Node Readable Stream API (including `pipe`)\n- hive multiple version support\n- multiple query support through the `multi_execute` and `multi_query` functions\n- advanced comments parsing\n\nThe project export the [Hive API][1] using [Apache Thrift RPC system][2]. It \nsupport multiple versions and a readable stream API.\n\n## Installation\n\n```\nnpm install thrift-hive\n```\n\n## Quick example\n\n```javascript\nvar hive = require('thrift-hive');\n// Client connection\nvar client = hive.createClient({\n  version: '0.7.1-cdh3u2',\n  server: '127.0.0.1',\n  port: 10000,\n  timeout: 1000\n});\n// Execute call\nclient.execute('use default', function(err){\n  // Query call\n  client.query('show tables')\n  .on('row', function(database){\n    console.log(database);\n  })\n  .on('error', function(err){\n    console.log(err.message);\n    client.end();\n  });\n  .on('end', function(){\n    client.end();\n  });\n});\n```\n\n## Hive Client\n\nWe've added a function `hive.createClient` to simplify coding. However, you \nare free to use the raw Thrift API. The client take an `options` object as its \nargument andexpose an `execute` and a `query` methods.\n\nAvailable options\n\n-   `version`   \n    default to '0.7.1-cdh3u2'\n-   `server`   \n    default to '127.0.0.1'\n-   `port`   \n    default to 10000\n-   `timeout`   \n    default to 1000 milliseconds\n\nAvailable API\n\n-   `client`   \n    A reference to the thrift client returned by `thrift.createClient`\n-   `connection`   \n    A reference to the thrift connection returned by `thrift.createConnection`\n-   `end([callback])`   \n    Close the Thrift connection\n-   `execute(query, [callback])`   \n    Execute a query and, when done, call the provided callback with an optional \n    error.\n-   `query(query, [size])`   \n    Execute a query and return its results as an array of arrays (rows and \n    columns). The size argument is optional and indicate the number of row to \n    return on each fetch.\n\n```coffeescript\nhive = require 'thrift-hive'\n# Client connection\nclient = hive.createClient\n  version: '0.7.1-cdh3u2'\n  server: '127.0.0.1'\n  port: 10000\n  timeout: 1000\n# Execute\nclient.execute 'USE default', (err) ->\n  console.log err.message if err\n  client.end()\n```\n\n## Hive Query\n\nThe `client.query` function implement the [EventEmitter API][3].\n\nThe following events are emitted:\n\n-   `row`\n    Emitted for each row returned by Hive. Contains a two arguments, the row\n    as an array and the row index.\n-   `row-first`\n    Emitted after the first row returned by Hive. Contains a two arguments, \n    the row as an array and the row index (always 0).\n-   `row-last`\n    Emitted after the last row returned by Hive. Contains a two arguments, \n    the row as an array and the row index.\n-   `error`\n    Emitted when the connection failed or when Hive return an error.\n-   `end`\n    Emitted when there are no more rows to retrieve, not called if there was\n    an error before.\n-   `both`\n    Convenient event combining the `error` and `end` events. Emitted when an\n    error occured or when there are no more rows to retrieve. Return the same \n    arguments than the `error` or `end` event depending on the operation \n    outturn.\n\nThe `client.query` function return a Node [readable stream][4]. It is possible to \npipe the data into a [writable stream][5] but it is your responsibility to emit\nthe `data` event, usually inside the `row` event.\n\nThe following code written in CoffeeScript is an example of piping data returned by the query into a [writable stream][5].\n\n```coffeescript\nfs = require 'fs'\nhive = require 'thrift-hive'\n# Client connection\nclient = hive.createClient\n  version: '0.7.1-cdh3u2'\n  server: '127.0.0.1'\n  port: 10000\n  timeout: 1000\n# Execute query\nclient.query('show tables')\n.on 'row', (database) ->\n  this.emit 'data', 'Found ' + database + '\\n'\n.on 'error', (err) ->\n  client.end()\n.on 'end', () ->\n  client.end()\n.pipe( fs.createWriteStream \"#{__dirname}/pipe.out\" )\n```\n\n## Navite Thrift API\n\nHere's the same example as the one in the \"Quick example\" section but using the \nnative thrift API.\n\n```javascript\nvar assert     = require('assert');\nvar thrift     = require('thrift');\nvar transport  = require('thrift/lib/thrift/transport');\nvar ThriftHive = require('../lib/0.7.1-cdh3u2/ThriftHive');\n// Client connection\nvar options = {transport: transport.TBufferedTransport, timeout: 1000};\nvar connection = thrift.createConnection('127.0.0.1', 10000, options);\nvar client = thrift.createClient(ThriftHive, connection);\n// Execute query\nclient.execute('use default', function(err){\n  client.execute('show tables', function(err){\n    assert.ifError(err);\n    client.fetchAll(function(err, databases){\n      if(err){\n        console.log(err.message);\n      }else{\n        console.log(databases);\n      }\n      connection.end();\n    });\n  });\n});\n```\n\n## Multi queries\n\nFor conveniency, we've added two functions, `multi_execute` and `multi_query` which\nmay run multiple requests in sequential mode inside a same client connection. They \nare both the same except how the last query is handled:\n\n-   `multi_execute` will end with an `execute` call, thus it's API is the same \n    as the `execute` function.\n-   `multi_query` will end with a `query` call, thus it's API is the same \n    as the `query` function.\n\nThey accept the same arguments as their counterpart but the query may be an \narray or a string of queries. If it is a string, it will be split into multiple \nqueries. Note, the parser is pretty light, removing ';' and comments but it \nseems to do the job.\n\n## Testing\n\nRun the samples:\n\n```bash\nnode samples/execute.js\nnode samples/query.js\nnode samples/style_native.js\nnode samples/style_sugar.js\n```\n\nRun the tests with `expresso`:\n\nHive must be started with Thrift support. By default, the tests will connect to\nHive Thrift server on the host `localhost` and the port `10000`. Edit the file\n\"./test/config.json\" if you wish to change the connection settings used accross\nthe tests. A database `test_database` will be created if it does not yet exist\nand all the tests will run on it.\n\n```bash\nnpm install -g expresso\nexpresso -s\n```\n\n[1]: http://hive.apache.org  \"Apache Hive\"\n[2]: http://thrift.apache.org  \"Apache Thrift\"\n[3]: http://nodejs.org/docs/v0.6.2/api/events.html#events.EventEmitter  \"EventEmitter API\"\n[4]: http://nodejs.org/docs/v0.6.2/api/streams.html#readable_Stream  \"Readable Stream API\"\n[5]: http://nodejs.org/docs/v0.6.2/api/streams.html#writable_Stream  \"Writable Stream API\"\n",
  "readmeFilename": "README.md",
  "_id": "thrift-hive@0.0.7",
  "dist": {
    "shasum": "9cb8d878f3de957b9d6f8bcfb516120d7b1a2f21"
  },
  "_from": "thrift-hive@*",
  "_resolved": "https://registry.npmjs.org/thrift-hive/-/thrift-hive-0.0.7.tgz"
}
